knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
packrat::snapshot(prompt = FALSE)
install.packages("readr")
packrat::snapshot(prompt = FALSE)
library("dplyr")
library("readr")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/albums.csv"
getwd()
download.file(url, "albums.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/artists.csv"
download.file(url, "albums.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/bands.csv"
download.file(url, "albums.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/songs.csv"
download.file(url, "albums.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/albums.csv"
download.file(url, "albums.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/artists.csv"
download.file(url, "artists.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/bands.csv"
download.file(url, "bands.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/songs.csv"
download.file(url, "songs.csv")
albums <- read_csv("albums.csv")
View(albums)
artist <- read_csv("artist.csv")
artists <- read_csv("artists.csv")
bands <- read_csv("bands.csv")
songs <- read_csv("songs.csv")
bands2 <- left_join(bands, artists, by = c("first", "last") )
bands2
albums <- as.tibble(read_csv("albums.csv"))
install.packages("tibble")
packrat::restore(prompt = FALSE)
library("tibble")
albums <- as.tibble(read_csv("albums.csv"))
artists <- as.tibble(read_csv("artists.csv"))
bands <- as.tibble(read_csv("bands.csv"))
songs <- as.tibble(read_csv("songs.csv"))
bands2 <- left_join(bands, artists, by = c("first", "last") )
bands2
class(albums)
class(songs)
View(albums)
View(bands2)
albums <- read_csv("albums.csv")
artists <- read_csv("artists.csv")
bands <- read_csv("bands.csv")
songs <- read_csv("songs.csv")
albums <- tbl_df(albums)
albums <- tbl_df(albums)
artists <- tbl_df(artists)
bands <- tbl_df(bands)
songs <- tbl_df(songs)
bands2 <- left_join(bands, artists, by = c("first", "last") )
bands2
class(bands2)
albums <- read_csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/albums.csv")
artists <- read_csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/artists.csv")
bands <- read_csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/bands.csv")
songs <- read_csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/songs.csv")
bands2 <- left_join(bands, artists, by = c("first", "last") )
bands2
albums <- read_csv("albums.csv")
artists <- read_csv("artists.csv")
bands <- read_csv("bands.csv")
songs <- read_csv("songs.csv")
bands2 <- left_join(bands, artists, by = c("first", "last") )
bands2
bands2 <- left_join(bands, artists, by = c("first", "last") )
# Examine the results
bands2
bands2 <- left_join(bands, artists, by = c("first", "last") )
# Examine the results
bands2
library("dplyr")
library("readr")
albums <- read_csv("albums.csv")
artists <- read_csv("artists.csv")
bands <- read_csv("bands.csv")
songs <- read_csv("songs.csv")
bands2 <- left_join(bands, artists, by = c("first", "last") )
# Examine the results
bands2
left_join(bands, artists, by = c("first", "last"))
# Finish the code below to recreate bands3 with a right join
bands2 <- left_join(bands, artists, by = c("first", "last"))
bands3 <- right_join(artists, bands, by = c("first", "last"))
# Check that bands3 is equal to bands2
setequal(bands2, bands3)
inner_join(songs, albums, by ="album")
# Join bands to artists using full_join()
full_join(artists, bands, by = c("first", "last"))
temp <- left_join(bands, artists, by = c("first", "last"))
temp <- filter(temp, instrument == "Guitar")
select(temp, first, last, band)
# Reproduce code above using pipes
bands %>%
left_join(artists, by = c("first", "last")) %>%
filter(instrument == "Guitar") %>%
select(first, last, band)
#precode
goal <- artists %>%
full_join(bands, by = c("first", "last")) %>%
inner_join(songs, by = c("first", "last"))
# Examine the contents of the goal dataset
goal
# Create goal2 using full_join() and inner_join()
goal2 <- artists %>%
full_join(bands, by = c("first", "last")) %>%
inner_join(songs, by = c("first", "last"))
# Check that goal and goal2 are the same
setequal(goal, goal2)
artists %>%
full_join(bands, by = c("first", "last")) %>%
full_join(songs, by = c("first", "last")) %>%
full_join(albums, by = c("album", "band"))
knitr::opts_chunk$set(echo = TRUE)
#install.packages("dplyr")
#install.packages("readr")
library("dplyr")
library("readr")
library("tibble")
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/albums.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/artists.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/bands.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/songs.csv"
#download.file(url, "songs.csv")
albums <- read_csv("albums.csv")
artists <- read_csv("artists.csv")
bands <- read_csv("bands.csv")
songs <- read_csv("songs.csv")
# Complete the code to join artists to bands
bands2 <- left_join(bands, artists, by = c("first", "last") )
# Examine the results
bands2
left_join(bands, artists, by = c("first", "last"))
# Finish the code below to recreate bands3 with a right join
bands2 <- left_join(bands, artists, by = c("first", "last"))
bands3 <- right_join(artists, bands, by = c("first", "last"))
# Check that bands3 is equal to bands2
setequal(bands2, bands3)
#Great work! left_join() is equivalent to right_join() with the order of the datasets reversed. Notice that each used the same by argument.
# Join albums to songs using inner_join()
inner_join(songs, albums, by = "album")
# Join bands to artists using full_join()
full_join(artists, bands, by = c("first", "last"))
# Find guitarists in bands dataset (don't change)
temp <- left_join(bands, artists, by = c("first", "last"))
temp <- filter(temp, instrument == "Guitar")
select(temp, first, last, band)
# Reproduce code above using pipes
bands %>%
left_join(artists, by = c("first", "last")) %>%
filter(instrument == "Guitar") %>%
select(first, last, band)
#precode
goal <- artists %>%
full_join(bands, by = c("first", "last")) %>%
inner_join(songs, by = c("first", "last"))
# Examine the contents of the goal dataset
goal
# Create goal2 using full_join() and inner_join()
goal2 <- artists %>%
full_join(bands, by = c("first", "last")) %>%
inner_join(songs, by = c("first", "last"))
# Check that goal and goal2 are the same
setequal(goal, goal2)
# Create one table that combines all information
artists %>%
full_join(bands, by = c("first", "last")) %>%
full_join(songs, by = c("first", "last")) %>%
full_join(albums, by = c("album", "band"))
plot(pressure)
# View the output of semi_join()
artists %>%
semi_join(songs, by = c("first", "last"))
# Create the same result
artists %>%
right_join(songs, by = c("first", "last")) %>%
filter(!is.na(instrument)) %>%
select(first, last, instrument)
albums %>%
# Collect the albums made by a band
semi_join(bands, by = "band") %>%
# Count the albums made by a band
nrow()
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/labels.csv"
download.file(url, "labels.csv")
labels <- read_csv("labels.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/tracks.csv"
download.file(url, "tracks.csv")
tracks <- read_csv("tracks.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/matches.csv"
download.file(url, "matches.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/matches.csv"
download.file(url, "matches.csv")
matches <- read_csv("matches.csv")
tracks %>% semi_join(
matches,
by = c("band", "year", "first")
)
tracks %>% filter(
(band == "The Beatles" &
year == 1964 & first == "Paul") |
(band == "The Beatles" &
year == 1965 & first == "John") |
(band == "Simon and Garfunkel" &
year == 1966 & first == "Paul")
)
tracks %>% semi_join(
matches,
by = c("band", "year", "first")
)
tracks %>% filter(
(band == "The Beatles" &
year == 1964 & first == "Paul") |
(band == "The Beatles" &
year == 1965 & first == "John") |
(band == "Simon and Garfunkel" &
year == 1966 & first == "Paul")
)
# Return rows of artists that don't have bands info
artists %>%
anti_join(bands, by = c("first", "last"))
artists
bands
# Return rows of artists that don't have bands info
artists %>%
anti_join(bands, by = c("first", "last"))
# Determine which key joins labels and songs
labels
songs
# Check your understanding
songs %>%
# Find the rows of songs that match a row in labels
semi_join(labels, by = "album") %>%
# Number of matches between labels and songs
nrow()
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/aerosmith.csv"
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/aerosmith.csv"
download.file(url, "aerosmith.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/greatest_hits.csv"
download.file(url, "greatest_hits.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/live.csv"
download.file(url, "live.csv")
aerosmith %>%
# Create the new dataset using a set operation
union(greatest_hits) %>%
# Count the total number of songs
nrow()
aerosmith <- read_csv("aerosmith.csv")
greatest_hits <- read_csv("greatest_hits.csv")
live <- read_csv("live.csv")
aerosmith %>%
# Create the new dataset using a set operation
union(greatest_hits) %>%
# Count the total number of songs
nrow()
aerosmith
greatest_hits
aerosmith %>%
# Create the new dataset using a set operation
union(greatest_hits) %>%
# Count the total number of songs
nrow()
# Create the new dataset using a set operation
aerosmith %>%
intersect(greatest_hits)
# Select songs from live and greatest_hits
live_songs <- live %>%
select(song)
greatest_songs <- greatest_hits %>%
select(song)
# Return the songs that only exist in one dataset
live_songs %>%
setdiff(greatest_songs) %>%
union(greatest_songs %>%
setdiff(live_songs))
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/definitive.csv"
download.file(url, "definitive.csv")
definitive <- read_csv("definitive.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/complete.csv"
download.file(url, "complete.csv")
complete <- read_csv("complete.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/soundtrack.csv"
download.file(url, "soundtrack.csv")
soundtrack <- read_csv("soundtrack.csv")
# Check if same order: definitive and union of complete and soundtrack
definitive %>%
identical(complete %>% union(soundtrack))
# Check if any order: definitive and union of complete and soundtrack
definitive %>%
setequal(complete %>% union(soundtrack))
