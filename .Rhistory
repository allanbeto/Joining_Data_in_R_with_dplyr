download.file(url, "live.csv")
aerosmith %>%
# Create the new dataset using a set operation
union(greatest_hits) %>%
# Count the total number of songs
nrow()
aerosmith <- read_csv("aerosmith.csv")
greatest_hits <- read_csv("greatest_hits.csv")
live <- read_csv("live.csv")
aerosmith %>%
# Create the new dataset using a set operation
union(greatest_hits) %>%
# Count the total number of songs
nrow()
aerosmith
greatest_hits
aerosmith %>%
# Create the new dataset using a set operation
union(greatest_hits) %>%
# Count the total number of songs
nrow()
# Create the new dataset using a set operation
aerosmith %>%
intersect(greatest_hits)
# Select songs from live and greatest_hits
live_songs <- live %>%
select(song)
greatest_songs <- greatest_hits %>%
select(song)
# Return the songs that only exist in one dataset
live_songs %>%
setdiff(greatest_songs) %>%
union(greatest_songs %>%
setdiff(live_songs))
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/definitive.csv"
download.file(url, "definitive.csv")
definitive <- read_csv("definitive.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/complete.csv"
download.file(url, "complete.csv")
complete <- read_csv("complete.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/soundtrack.csv"
download.file(url, "soundtrack.csv")
soundtrack <- read_csv("soundtrack.csv")
# Check if same order: definitive and union of complete and soundtrack
definitive %>%
identical(complete %>% union(soundtrack))
# Check if any order: definitive and union of complete and soundtrack
definitive %>%
setequal(complete %>% union(soundtrack))
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/side_one.csv"
download.file(url, "side_one.csv")
side_one <- read_csv("side_one.csv")
library("dplyr")
library("readr")
side_one <- read_csv("side_one.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/side_two.csv"
download.file(url, "side_two.csv")
side_two <- read_csv("side_two.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/jimi1.csv"
download.file(url, "jimi1.csv")
jimi1 <- read_csv("jimi1.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/jimi2.csv"
download.file(url, "jimi2.csv")
jimi2 <- read_csv("jimi2.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/jimi3.csv.csv"
download.file(url, "jimi3.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/jimi3.csv"
download.file(url, "jimi3.csv")
jimi3 <- read_csv("jimi3.csv")
# Examine side_one and side_two
side_one
side_two
# Bind side_one and side_two into a single dataset
side_one %>%
bind_rows(side_two)
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/discography.csv"
download.file(url, "discography.csv")
discography <- read_csv("discography.csv")
discography
jimi
jimi <- list("Are You Experienced" = jimi1,
"Axis: Bold As Love" = jimi2,
"Electric Ladyland" = jimi3)
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/hank_charts.csv"
download.file(url, "hank_charts.csv")
hank_charts <- read_csv("hank_charts.csv")
discography
jimi
jimi %>%
# Bind jimi into a single data frame
bind_rows(.id = "album") %>%
# Make a complete data frame
left_join(discography, by = "album")
discography
jimi
jimi %>%
# Bind jimi into a single data frame
bind_rows(.id = "album") %>%
# Make a complete data frame
left_join(discography, by = "album")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/hank_years.csv"
download.file(url, "hank_years.csv")
hank_years <- read_csv("hank_years.csv")
# Examine hank_years and hank_charts
hank_years
hank_charts
hank_years %>%
# Reorder hank_years alphabetically by song title
arrange(song) %>%
# Select just the year column
select(year) %>%
# Bind the year column
bind_cols(hank_charts) %>%
# Arrange the finished dataset
arrange(year, song)
hank0 <- hank_years %>%
arrange(song) %>%
select(year) %>%
bind_cols(hank_charts) %>%
arrange(year, song)
hank_year <- hank0$year
hank_song <- hank0$song
hank_peak <- hank0$peak
# Make combined data frame using data_frame()
data_frame(year = hank_year, song = hank_song, peak = hank_peak) %>%
# Extract songs where peak equals 1
filter(hank_peak == 1)
# Examine the contents of hank
hank
hank <- list(year = hank_year,
song = hank_song,
peak = hank_peak)
# Examine the contents of hank
hank
# Convert the hank list into a data frame
hank %>% as_data_frame() %>%
# Extract songs where peak equals 1
filter(peak == 1)
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael1.csv"
download.file(url, "michael1.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael2.csv"
download.file(url, "michael2.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael3.csv"
download.file(url, "michael3.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael4.csv"
download.file(url, "michael4.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael5.csv"
download.file(url, "michael5.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael6.csv"
download.file(url, "michael6.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael7.csv"
download.file(url, "michael7.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael8.csv"
download.file(url, "michael8.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael9.csv"
download.file(url, "michael9.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael10.csv"
download.file(url, "michael10.csv")
michael1 <- read_csv("michael1.csv")
michael2 <- read_csv("michael2.csv")
michael3 <- read_csv("michael3.csv")
michael4 <- read_csv("michael4.csv")
michael5 <- read_csv("michael5.csv")
michael6 <- read_csv("michael6.csv")
michael7 <- read_csv("michael7.csv")
michael8 <- read_csv("michael8.csv")
michael9 <- read_csv("michael9.csv")
michael10 <- read_csv("michael10.csv")
michael <- list("Got to Be There" = michael1, "Ben" = michael2,  "Music & Me" = michael3,
"Forever, Michael" = michael4, "Off the Wall" = michael5,  "Thriller" = michael6,
"Bad" = michael7,  "Dangerous" = michael8, "HIStory" = michael9,  "Invincible" = michael10)
michael
michael %>%
bind_rows(.id = "album") %>%
group_by(album) %>%
mutate(rank = min_rank(peak)) %>%
filter(rank == 1) %>%
select(-rank, -peak)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("dplyr")
#install.packages("readr")
library("dplyr")
library("readr")
library("tibble")
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/albums.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/artists.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/bands.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/songs.csv"
#url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/labels.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/tracks.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/matches.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/aerosmith.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/greatest_hits.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/live.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/definitive.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/complete.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/soundtrack.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/side_one.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/side_two.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/jimi1.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/jimi2.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/jimi3.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/discography.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/hank_charts.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/hank_years.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael1.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael2.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael3.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael4.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael5.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael6.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael7.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael8.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael9.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/michael10.csv"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/seventies.rds"
# url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/eighties.rds"
# download.file(url, "seventies.rds")
albums <- read_csv("albums.csv")
artists <- read_csv("artists.csv")
bands <- read_csv("bands.csv")
songs <- read_csv("songs.csv")
labels <- read_csv("labels.csv")
tracks <- read_csv("tracks.csv")
matches <- read_csv("matches.csv")
aerosmith <- read_csv("aerosmith.csv")
greatest_hits <- read_csv("greatest_hits.csv")
live <- read_csv("live.csv")
definitive <- read_csv("definitive.csv")
complete <- read_csv("complete.csv")
soundtrack <- read_csv("soundtrack.csv")
side_one <- read_csv("side_one.csv")
side_two <- read_csv("side_two.csv")
jimi1 <- read_csv("jimi1.csv")
jimi2 <- read_csv("jimi2.csv")
jimi3 <- read_csv("jimi3.csv")
discography <- read_csv("discography.csv")
jimi <- list("Are You Experienced" = jimi1,
"Axis: Bold As Love" = jimi2,
"Electric Ladyland" = jimi3)
hank_charts <- read_csv("hank_charts.csv")
hank_years <- read_csv("hank_years.csv")
hank0 <- hank_years %>%
arrange(song) %>%
select(year) %>%
bind_cols(hank_charts) %>%
arrange(year, song)
hank_year <- hank0$year
hank_song <- hank0$song
hank_peak <- hank0$peak
hank <- list(year = hank_year,
song = hank_song,
peak = hank_peak)
michael1 <- read_csv("michael1.csv")
michael2 <- read_csv("michael2.csv")
michael3 <- read_csv("michael3.csv")
michael4 <- read_csv("michael4.csv")
michael5 <- read_csv("michael5.csv")
michael6 <- read_csv("michael6.csv")
michael7 <- read_csv("michael7.csv")
michael8 <- read_csv("michael8.csv")
michael9 <- read_csv("michael9.csv")
michael10 <- read_csv("michael10.csv")
michael <- list("Got to Be There" = michael1, "Ben" = michael2,  "Music & Me" = michael3,
"Forever, Michael" = michael4, "Off the Wall" = michael5,  "Thriller" = michael6,
"Bad" = michael7,  "Dangerous" = michael8, "HIStory" = michael9,  "Invincible" = michael10)
# seventies <- readRDS("seventies.rds")
#
# eighties <- read_rds("eighties.rds")
# Complete the code to join artists to bands
bands2 <- left_join(bands, artists, by = c("first", "last") )
# Examine the results
bands2
left_join(bands, artists, by = c("first", "last"))
# Finish the code below to recreate bands3 with a right join
bands2 <- left_join(bands, artists, by = c("first", "last"))
bands3 <- right_join(artists, bands, by = c("first", "last"))
# Check that bands3 is equal to bands2
setequal(bands2, bands3)
#Great work! left_join() is equivalent to right_join() with the order of the datasets reversed. Notice that each used the same by argument.
# Join albums to songs using inner_join()
inner_join(songs, albums, by = "album")
# Join bands to artists using full_join()
full_join(artists, bands, by = c("first", "last"))
# Find guitarists in bands dataset (don't change)
temp <- left_join(bands, artists, by = c("first", "last"))
temp <- filter(temp, instrument == "Guitar")
select(temp, first, last, band)
# Reproduce code above using pipes
bands %>%
left_join(artists, by = c("first", "last")) %>%
filter(instrument == "Guitar") %>%
select(first, last, band)
#precode
goal <- artists %>%
full_join(bands, by = c("first", "last")) %>%
inner_join(songs, by = c("first", "last"))
# Examine the contents of the goal dataset
goal
# Create goal2 using full_join() and inner_join()
goal2 <- artists %>%
full_join(bands, by = c("first", "last")) %>%
inner_join(songs, by = c("first", "last"))
# Check that goal and goal2 are the same
setequal(goal, goal2)
# Create one table that combines all information
artists %>%
full_join(bands, by = c("first", "last")) %>%
full_join(songs, by = c("first", "last")) %>%
full_join(albums, by = c("album", "band"))
# View the output of semi_join()
artists %>%
semi_join(songs, by = c("first", "last"))
# Create the same result
artists %>%
right_join(songs, by = c("first", "last")) %>%
filter(!is.na(instrument)) %>%
select(first, last, instrument)
albums %>%
# Collect the albums made by a band
semi_join(bands, by = "band") %>%
# Count the albums made by a band
nrow()
tracks %>% semi_join(
matches,
by = c("band", "year", "first")
)
tracks %>% filter(
(band == "The Beatles" &
year == 1964 & first == "Paul") |
(band == "The Beatles" &
year == 1965 & first == "John") |
(band == "Simon and Garfunkel" &
year == 1966 & first == "Paul")
)
artists
bands
# Return rows of artists that don't have bands info
artists %>%
anti_join(bands, by = c("first", "last"))
# Determine which key joins labels and songs
labels
songs
# Check your understanding
songs %>%
# Find the rows of songs that match a row in labels
semi_join(labels, by = "album") %>%
# Number of matches between labels and songs
nrow()
aerosmith
greatest_hits
aerosmith %>%
# Create the new dataset using a set operation
union(greatest_hits) %>%
# Count the total number of songs
nrow()
# Create the new dataset using a set operation
aerosmith %>%
intersect(greatest_hits)
live
greatest_hits
# Select the song names from live
live_songs <- live %>% select(song)
# Select the song names from greatest_hits
greatest_songs <- greatest_hits %>% select(song)
# Create the new dataset using a set operation
live_songs %>%
setdiff(greatest_songs)
# Select songs from live and greatest_hits
live_songs <- live %>%
select(song)
greatest_songs <- greatest_hits %>%
select(song)
# Return the songs that only exist in one dataset
live_songs %>%
setdiff(greatest_songs) %>%
union(greatest_songs %>%
setdiff(live_songs))
# Check if same order: definitive and complete
definitive %>%
identical(complete)
# Check if any order: definitive and complete
definitive %>%
setequal(complete)
# Songs in definitive but not complete
definitive %>%
setdiff(complete)
# Songs in complete but not definitive
complete %>%
setdiff(definitive)
# Check if same order: definitive and union of complete and soundtrack
definitive %>%
identical(complete %>% union(soundtrack))
# Check if any order: definitive and union of complete and soundtrack
definitive %>%
setequal(complete %>% union(soundtrack))
# Examine side_one and side_two
side_one
side_two
# Bind side_one and side_two into a single dataset
side_one %>%
bind_rows(side_two)
# Examine discography and jimi
discography
jimi
jimi %>%
# Bind jimi into a single data frame
bind_rows(.id = "album") %>%
# Make a complete data frame
left_join(discography, by = "album")
# Examine hank_years and hank_charts
hank_years
hank_charts
hank_years %>%
# Reorder hank_years alphabetically by song title
arrange(song) %>%
# Select just the year column
select(year) %>%
# Bind the year column
bind_cols(hank_charts) %>%
# Arrange the finished dataset
arrange(year, song)
# Make combined data frame using data_frame()
data_frame(year = hank_year, song = hank_song, peak = hank_peak) %>%
# Extract songs where peak equals 1
filter(hank_peak == 1)
# Examine the contents of hank
hank
# Convert the hank list into a data frame
hank %>% as_data_frame() %>%
# Extract songs where peak equals 1
filter(peak == 1)
# Examine the contents of michael
michael
michael %>%
bind_rows(.id = "album") %>%
group_by(album) %>%
mutate(rank = min_rank(peak)) %>%
filter(rank == 1) %>%
select(-rank, -peak)
both <- seventies %>% bind_rows(eighties)
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/stage_songs.csv"
download.file(url, "stage_songs.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/stage_writers.csv"
download.file(url, "stage_writers.csv")
stage_songs <- read_csv("stage_songs.csv")
stage_writers <- read_csv("stage_writers.csv")
library("tibble")
stage_songs %>%
# Add row names as a column named song
rownames_to_column(var = "song") %>%
# Left join stage_writers to stage_songs
left_join(stage_writers, by = "song")
stage_songs <- read.csv("stage_songs.csv")
stage_writers <- read.csv("stage_writers.csv")
library("tibble")
stage_songs %>%
# Add row names as a column named song
rownames_to_column(var = "song") %>%
# Left join stage_writers to stage_songs
left_join(stage_writers, by = "song")
stage_songs <- read.csv("stage_songs.csv", row.names = 1, stringsAsFactors = FALSE)
stage_writers <- read.csv("stage_writers.csv", row.names = 1, stringsAsFactors = FALSE)
library("tibble")
stage_songs %>%
# Add row names as a column named song
rownames_to_column(var = "song") %>%
# Left join stage_writers to stage_songs
left_join(stage_writers, by = "song")
stage_songs
stage_writers
stage_songs
stage_writers
stage_songs
stage_songs %>%
# Add row names as a column named song
rownames_to_column(var = "song")
stage_songs %>%
# Add row names as a column named song
rownames_to_column(var = "song") %>%
# Left join stage_writers to stage_songs
left_join(stage_writers, by = "song")
stage_songs %>%
# Add row names as a column named song
rownames_to_column(var = "song")
stage_writers
stage_writers <- read.csv("stage_writers.csv", stringsAsFactors = FALSE)
stage_writers
stage_songs %>%
# Add row names as a column named song
rownames_to_column(var = "song") %>%
# Left join stage_writers to stage_songs
left_join(stage_writers, by = "song")
stage_songs
stage_writers
stage_songs %>%
# Add row names as a column named song
rownames_to_column(var = "song") %>%
# Left join stage_writers to stage_songs
left_join(stage_writers, by = "song")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/shows.csv"
download.file(url, "shows.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/composer.csv"
download.file(url, "composer.csv")
url <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1074/datasets/composers.csv"
download.file(url, "composers.csv")
shows <- read_csv("shows.csv")
composers <- read_csv("composers")
composers <- read_csv("composers.csv")
shows
composers
composers %>% left_join(shows, by = "musical")
